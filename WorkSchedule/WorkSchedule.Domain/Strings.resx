<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsenceAlreadyExists" xml:space="preserve">
    <value>Já existe bloqueio para este servidor com mesmo período e causa.</value>
  </data>
  <data name="AbsenceNotFound" xml:space="preserve">
    <value>Bloqueio não encontrado.</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Tem certeza?</value>
  </data>
  <data name="Cause" xml:space="preserve">
    <value>Causa</value>
  </data>
  <data name="CreationTimeColumnTitle" xml:space="preserve">
    <value>Data/Hora de Cadastro</value>
  </data>
  <data name="EmployeeAlreadyExists" xml:space="preserve">
    <value>Já existe um servidor com esta mesma matrícula.</value>
  </data>
  <data name="EmployeeCodeColumnTitle" xml:space="preserve">
    <value>Matrícula</value>
  </data>
  <data name="EmployeeNotFound" xml:space="preserve">
    <value>Servidor não encontrado.</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>Fim</value>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Erro</value>
  </data>
  <data name="FirsScheduleColumnTitle" xml:space="preserve">
    <value>Entra no primeiro sobreaviso?</value>
  </data>
  <data name="IndexSign" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>O id é inválido.</value>
  </data>
  <data name="LengthEmployeeCode" xml:space="preserve">
    <value>A matrícula deve conter {0} números.</value>
  </data>
  <data name="MinLengthEmployeeName" xml:space="preserve">
    <value>O nome do servidor deve conter {0} ou mais letras.</value>
  </data>
  <data name="MinLengthPassword" xml:space="preserve">
    <value>A senha deve conter {0} ou mais caracteres.</value>
  </data>
  <data name="NameColumnTitle" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Não</value>
  </data>
  <data name="OnlyNumbersEmployeeCode" xml:space="preserve">
    <value>A matrícula do servidor só pode conter números.</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Confirma?</value>
  </data>
  <data name="RequiredCause" xml:space="preserve">
    <value>A causa é obrigatória.</value>
  </data>
  <data name="RequiredEmployee" xml:space="preserve">
    <value>O servidor é obrigatório.</value>
  </data>
  <data name="RequiredEmployeeCode" xml:space="preserve">
    <value>A matrícula do servidor é obrigatória.</value>
  </data>
  <data name="RequiredEmployeeName" xml:space="preserve">
    <value>O nome do servidor é obrigatório.</value>
  </data>
  <data name="RequiredEndDate" xml:space="preserve">
    <value>Data de final de período obrigatória.</value>
  </data>
  <data name="RequiredGuid" xml:space="preserve">
    <value>O id é obrigatório.</value>
  </data>
  <data name="RequiredLetterInPassword" xml:space="preserve">
    <value>A senha deve conter uma ou mais letras.</value>
  </data>
  <data name="RequiredLowerCaseInPassword" xml:space="preserve">
    <value>A senha deve conter uma ou mais letras em minúsculo.</value>
  </data>
  <data name="RequiredNameUser" xml:space="preserve">
    <value>O nome do usuário é obrigatório.</value>
  </data>
  <data name="RequiredNumberInPassword" xml:space="preserve">
    <value>A senha deve conter um ou mais números.</value>
  </data>
  <data name="RequiredPassword" xml:space="preserve">
    <value>A senha é obrigatória.</value>
  </data>
  <data name="RequiredRole" xml:space="preserve">
    <value>A função é obrigatória.</value>
  </data>
  <data name="RequiredRoleName" xml:space="preserve">
    <value>O nome da função é obrigatório.</value>
  </data>
  <data name="RequiredSpecialCharInPassword" xml:space="preserve">
    <value>A senha deve conter um ou mais dos seguintes caracteres: [{0}]</value>
  </data>
  <data name="RequiredStartDate" xml:space="preserve">
    <value>Data de início de período obrigatória.</value>
  </data>
  <data name="RequiredUpperCaseInPassword" xml:space="preserve">
    <value>A senha deve conter uma ou mais letras em maiúsculo.</value>
  </data>
  <data name="RequiredUsername" xml:space="preserve">
    <value>O nome de usuário é obrigatório.</value>
  </data>
  <data name="SelectOneRowMessage" xml:space="preserve">
    <value>Por favor selecione apenas uma linha.</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Início</value>
  </data>
  <data name="StartDateCannotBeAfterEndDate" xml:space="preserve">
    <value>A data de início não pode ser posterior à data de final de período.</value>
  </data>
  <data name="SuccessSaveMesssage" xml:space="preserve">
    <value>Registro cadastrado com sucesso.</value>
  </data>
  <data name="SuccessTitle" xml:space="preserve">
    <value>Sucesso</value>
  </data>
  <data name="SuccessUpdateMessage" xml:space="preserve">
    <value>Registro atualizado com sucesso.</value>
  </data>
  <data name="WarningTitle" xml:space="preserve">
    <value>Aviso</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Sim</value>
  </data>
</root>